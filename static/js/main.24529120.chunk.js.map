{"version":3,"sources":["Dice.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Dice","this","props","diceNumber","diceSize","shake","rolling","dice","className","Component","defaultProps","RollDice","state","dice1","dice2","buttonClick","handleBtn","executeFunc","bind","e","roll","randomNumber1","Math","floor","random","length","randomNumber2","setState","setTimeout","btnTitle","onClick","disabled","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAGMA,G,uLAMQ,IAAD,EACwBC,KAAKC,MAA7BC,EADA,EACAA,WAAYC,EADZ,EACYA,SACbC,EAAQJ,KAAKC,MAAMI,QAAU,aAAe,GAC5CC,EAAI,sBAAmBJ,EAAnB,eAAoCC,EAApC,aAAiDC,GAEzD,OACI,0BAAMG,UAAU,QACZ,uBAAGA,UAAWD,S,GAbXE,cAAbT,EACKU,aAAe,CAClBP,WAAa,MACbC,SAAa,MAgBNJ,QClBTW,G,kBACF,WAAYT,GAAQ,IAAD,8BACf,4CAAMA,KAEDU,MAAQ,CACRC,MAAO,MACPC,MAAO,MACPC,aAAa,EACbC,UAAa,EAAKC,YAAYC,KAAjB,iBAPH,E,yEAePC,GAERlB,KAAKmB,S,6BAgBD,IAAD,OAEH,IAAInB,KAAKW,MAAMG,YAAa,CACxB,IAAIR,EAAON,KAAKC,MAAMK,KAElBc,EAAgBC,KAAKC,MAAMD,KAAKE,SAAWjB,EAAKkB,QAChDC,EAAgBJ,KAAKC,MAAMD,KAAKE,SAAWjB,EAAKkB,QAEpDxB,KAAK0B,SAAS,CACVd,MAAON,EAAKc,GACZP,MAAOP,EAAKmB,GACZX,aAAa,IAGjBa,YAAW,WACP,EAAKD,SAAS,CAACZ,aAAa,MAC7B,Q,+BAOP,IAAIc,EAAW5B,KAAKW,MAAMG,YAAc,aAAe,YAEvD,OACI,yBAAKP,UAAU,YACX,yCACA,kBAAC,EAAD,CACAL,WAAcF,KAAKW,MAAMC,MACzBP,QAASL,KAAKW,MAAMG,cAGpB,kBAAC,EAAD,CACAZ,WAAcF,KAAKW,MAAME,MACzBR,QAASL,KAAKW,MAAMG,cAGpB,4BAAQe,QAAS7B,KAAKW,MAAMI,UAAWR,UAAU,eAAeuB,SAAU9B,KAAKW,MAAMG,aAAcc,Q,GAxE5FpB,cAAjBE,EAYKD,aAAe,CAClBH,KAAM,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAiEvCI,QCtEAqB,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCKcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.24529120.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Dice.css';\r\n\r\nclass Dice extends Component {\r\n    static defaultProps = {\r\n        diceNumber : \"one\",\r\n        diceSize   : \"10\"\r\n    }\r\n\r\n    render() {\r\n        let {diceNumber, diceSize} = this.props;\r\n        let shake = this.props.rolling ? \"miniBounce\" : '';\r\n        let dice  = `fas fa-dice-${diceNumber} fa-${diceSize}x ${shake}`;\r\n\r\n        return (\r\n            <span className=\"Dice\">\r\n                <i className={dice}></i>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dice;\r\n","import React, { Component } from 'react';\r\nimport Dice from './Dice';\r\nimport './RollDice.css'\r\n\r\nclass RollDice extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             dice1: \"one\",\r\n             dice2: \"one\",\r\n             buttonClick: false,\r\n             handleBtn  : this.executeFunc.bind(this)\r\n        }\r\n    }\r\n\r\n    static defaultProps = {\r\n        dice: ['one', 'two', 'three', 'four', 'five', 'six']\r\n    }\r\n\r\n    executeFunc(e) {\r\n        // this.clickBtn();\r\n        this.roll();\r\n    }\r\n\r\n    // clickBtn(e) {\r\n\r\n    //     if(this.state.buttonClick) {\r\n    //         const btn = document.getElementsByClassName(\"fas\");\r\n    //         this.setState({buttonClick: false});\r\n    //         btn.classList.remove(\"miniBounce\");\r\n    //     } else {\r\n    //         const btn = document.getElementsByClassName(\"fas\");\r\n    //         // btn.classList.add(\"miniBounce\");\r\n    //         this.setState({buttonClick: true});\r\n    //     }\r\n    // }\r\n\r\n    roll() {\r\n\r\n        if(!this.state.buttonClick) {\r\n            let dice = this.props.dice;\r\n\r\n            let randomNumber1 = Math.floor(Math.random() * dice.length);\r\n            let randomNumber2 = Math.floor(Math.random() * dice.length);\r\n            \r\n            this.setState({\r\n                dice1: dice[randomNumber1], \r\n                dice2: dice[randomNumber2],\r\n                buttonClick: true\r\n            });\r\n\r\n            setTimeout(() => {\r\n                this.setState({buttonClick: false})\r\n            }, 1000);\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        let btnTitle = this.state.buttonClick ? \"Rolling...\" : \"Roll Dice\";\r\n        \r\n        return (\r\n            <div className=\"RollDice\">\r\n                <h1>Roll Dice</h1>\r\n                <Dice \r\n                diceNumber = {this.state.dice1} \r\n                rolling={this.state.buttonClick}\r\n                />\r\n\r\n                <Dice \r\n                diceNumber = {this.state.dice2}\r\n                rolling={this.state.buttonClick}\r\n                />\r\n\r\n                <button onClick={this.state.handleBtn} className=\"RollDice-btn\" disabled={this.state.buttonClick}>{btnTitle}</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default RollDice;\r\n","import React from 'react';\nimport './App.css';\nimport RollDice from './RollDice';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDice />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}